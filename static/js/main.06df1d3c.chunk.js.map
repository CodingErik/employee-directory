{"version":3,"sources":["components/Table/Table.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Table","useState","rows","setRow","label","field","sort","width","columns","useEffect","a","axios","get","res","console","log","data","results","people","map","person","first","name","last","dob","date","email","phone","picture","src","thumbnail","alt","getUsers","className","striped","bordered","small","Header","Navbar","Brand","href","App","Container","fluid","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QAoFeA,EA9ED,WAAM,MAGKC,mBAAS,IAHd,mBAGXC,EAHW,KAGLC,EAHK,OAIYF,mBAAS,CACrC,CACEG,MAAO,UACPC,MAAO,UACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,MACPC,MAAO,MACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,OAvCO,mBAIXC,EAJW,UAkElB,OArBAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAEkBC,IAAMC,IAAI,gDAF5B,OAEMC,EAFN,OAGEC,QAAQC,IAAIF,EAAIG,KAAKC,SACjBC,EAASL,EAAIG,KAAKC,QAAQE,KAAI,SAAAC,GAChC,MAAO,CACLC,MAAOD,EAAOE,KAAKD,MACnBE,KAAMH,EAAOE,KAAKC,KAClBC,IAAKJ,EAAOI,IAAIC,KAChBC,MAAON,EAAOM,MACdC,MAAOP,EAAOO,MACdC,QAAS,yBAAKC,IAAKT,EAAOQ,QAAQE,UAAWC,IAAKX,EAAOE,KAAKD,YAGlElB,EAAOe,GAdT,4CADc,uBAAC,WAAD,wBAiBdc,KACC,IAID,kBAAC,IAAD,CAEEC,UAAU,QACVC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLpB,KAAM,CAACR,UAAQN,W,uCChENmC,MAVf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQL,UAAU,8DACd,kBAACK,EAAA,EAAOC,MAAR,CAAcC,KAAK,IAAIP,UAAU,cAC7B,sDCaDQ,MAff,WACE,OACE,6BACI,kBAAC,EAAD,MACF,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,WCFQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.06df1d3c.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport React, { useState, useEffect } from 'react';\nimport { MDBDataTable } from 'mdbreact';\nimport \"./style.css\";\nimport axios from \"axios\";\n\nconst Table = () => {\n\n  //set up a state for rows and columns \n  const [rows, setRow] = useState([]);\n  const [columns, setColumns] = useState([\n    {\n      label: 'picture',\n      field: 'picture',\n      sort: 'asc',\n      width: 100\n    },\n    {\n      label: 'first',\n      field: 'first',\n      sort: 'asc',\n      width: 150\n    },\n    {\n      label: 'last',\n      field: 'last',\n      sort: 'asc',\n      width: 150\n    },\n    {\n      label: 'dob',\n      field: 'dob',\n      sort: 'asc',\n      width: 150\n    },\n    {\n      label: 'email',\n      field: 'email',\n      sort: 'asc',\n      width: 200\n    },\n    {\n      label: 'phone',\n      field: 'phone',\n      sort: 'asc',\n      width: 150\n    }\n  ]);\n \n\n  // this will run everytime the page is loaded \n  useEffect(() => {\n    async function getUsers() {\n      // use this API to get random users \n      let res = await axios.get('https://randomuser.me/api/?results=50&nat=us')\n      console.log(res.data.results); \n      let people = res.data.results.map(person => {\n        return {\n          first: person.name.first,\n          last: person.name.last,\n          dob: person.dob.date,\n          email: person.email,\n          phone: person.phone,\n          picture: <img src={person.picture.thumbnail} alt={person.name.first} />\n        }\n      });\n      setRow(people); \n    }\n    getUsers()\n  }, [])\n\n\n  return (\n    <MDBDataTable\n      // responsive\n      className='table'\n      striped\n      bordered\n      small\n      data={{columns,rows}}\n    />\n  );\n}\n\nexport default Table;","import React from \"react\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport \"./style.css\"\n\n// header component\nfunction Header() {\n    return (\n        <Navbar className=\"p-3 display-flex justify-content-center Title shadow mb-4 \">\n            <Navbar.Brand href=\"/\" className='text-white' >\n                <h1>Employee Directory </h1>\n            </Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default Header; \n\n\n","import React from 'react';\nimport Table from \"./components/Table/Table\"\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Header from \"./components/header/Header\"\n\nfunction App() {\n  return (\n    <div>\n        <Header />\n      <Container fluid>\n        <Row>\n          <Col>\n            <Table />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}